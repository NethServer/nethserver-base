#!/usr/bin/python

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#



import yum
import os
import subprocess
import sys
import simplejson
import yum.misc


def usage():
    print "Usage: %s <command> [name]" % sys.argv[0]
    print "    command: compsdump|info|check-update"
    sys.exit(0)


def _pkg_to_dict(pkg, installed=False):
    ret = {}
    ret['name'] = pkg.name
    ret['arch'] = pkg.arch
    ret['epoc'] = pkg.epoch
    ret['version'] = pkg.version 
    ret['release'] = pkg.release
    ret['description'] = pkg.description
    ret['summary'] = pkg.summary
    ret['license'] = pkg.license
    ret['size'] = pkg.size
    ret['url'] = pkg.url
    ret['repo'] = "%s" % pkg.repo
    ret['installed'] = installed

    return ret
    

def _pkg_list(yb, pkg):
    ypl = yb.doPackageLists(pkgnarrow="all", patterns="*", ignore_case=True)
    for p in ypl.installed:
        if pkg == p.name:
            return _pkg_to_dict(p,True)
    for p in ypl.available:
        if pkg == p.name:
            return _pkg_to_dict(p,False)
    

def pkginfo(yb, pkg):
    print simplejson.dumps(_pkg_list(yb, pkg))


def compsdump(yb):
    comps = {}
    comps["groups"] = []
    comps["categories"] = []

    installed_packages = map(lambda p: p.name, yb.doRpmDBSetup())
    package_state = lambda p: (p, p in installed_packages)
    installed_groups, available_groups = yb.doGroupLists()

    for g in yb.comps.get_groups():
        if not g.user_visible:
            continue
        tmp = {
            'id' : g.groupid,
            'name' : g.ui_name,
            'installed': g in installed_groups,
            'description' : g.ui_description,
            'mandatory_packages': dict(map(package_state, g.mandatory_packages.keys())),
            'optional_packages': dict(map(package_state, g.optional_packages.keys())),
            'default_packages' : dict(map(package_state, g.default_packages.keys())),
            'conditional_packages': dict(map(package_state, g.conditional_packages.keys()))
        }
        comps["groups"].append(tmp)        

    for c in yb.comps.get_categories():
        comps["categories"].append({
            'id': c.categoryid,
            'name': c.ui_name,
            'description': c.ui_description,
            'display_order': c.display_order,
            'groups': c.groups
        })

    print( simplejson.dumps(comps) )

def check_update(yb, strict = False):
    updates = map(lambda i: {'name': i[0], 'arch': i[1], 'epoch': i[2], 'version': i[3], 'release': i[4]}, yb.up.getUpdatesList())
    yb.doUnlock()

    if strict:
        changelog = subprocess.Popen(['/usr/bin/yum', 'changelog', '1', 'updates', '--setopt=reposdir=/etc/nethserver/yum-update.d/'], stdout=subprocess.PIPE, shell=False, env={'LANG': 'en_US.UTF-8'}).communicate()[0];
    else:
        changelog = subprocess.Popen(['/usr/bin/yum', 'changelog', '1', 'updates'], stdout=subprocess.PIPE, shell=False, env={'LANG': 'en_US.UTF-8'}).communicate()[0];

    yb.doLock()
    simplejson.dump({'updates': updates, 'changelog': changelog.decode('utf-8')}, sys.stdout)

def parse_pkginfo_conf():
    repos = []
    try:
        f = open('/etc/nethserver/pkginfo.conf')
        for l in f.read().split("\n"):
            if l != '' and l[0] != '#':
                repos.append(l.strip())
        f.close()
    except Exception, e:
        sys.stderr.write("Could not parse pkginfo.conf file: %s" % str(e))

    return repos

def main():
    if len(sys.argv) < 2:
        usage()
    if not sys.argv[1] in ["grouplist", "info", "compsdump", "check-update", "check-strict-update"]:
        usage()
    if sys.argv[1] == "info" and len(sys.argv) < 3:
        usage()

    try:
        yum.misc.setup_locale()

        ypbc = yum._YumPreBaseConf()
        ypbc.debuglevel = 0
        ypbc.errorlevel = 0
        ypbc.init_plugins = False
        yb = yum.YumBase()
        yb.preconf = ypbc
        yb.doLock()

        action = sys.argv[1]
        # force repository configuration now,
        # it will not work if invoked after listGroupsEnabled()
        if action == 'check-strict-update':
            yb.conf.reposdir = '/etc/nethserver/yum-update.d/'

        for r in yb.repos.listGroupsEnabled():
            if not r.id in parse_pkginfo_conf():
                r.enablegroups = 0

        if action == 'grouplist' or action == 'compsdump':
           compsdump(yb)
        elif action == 'info':
           pkginfo(yb,sys.argv[2])
        elif action == 'check-update':
           check_update(yb)
        elif action == 'check-strict-update':
           check_update(yb, strict = True)


    except Exception, e:
        print simplejson.dumps({'error':"%s"%e})
        sys.exit(1)

    finally:
        yb.doUnlock()

if __name__ == "__main__":
    main()

