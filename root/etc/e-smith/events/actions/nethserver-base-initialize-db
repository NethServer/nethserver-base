#!/usr/bin/perl -w

#
# Copyright (C) 2015 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

#
# This script initializes NethServer e-smith db accordingly to system
# configuration
#

use strict;
use File::Basename;
use esmith::NetworksDB;
use esmith::ConfigDB;
use Encode qw(encode decode);
use Net::IPv4Addr;


my $cdb = esmith::ConfigDB->open() || die("Could not open ConifgDB");
my $idb = esmith::NetworksDB->open() || die("Could not open NetworksDB");

#
# Create ethernet entries in networks DB
# (replaces update-networks-db script)
#
sub initialize_networks_db
{
    my @fields = qw(name type model driver speed link);
    my @records = ();
    my $cableid = undef;
    open(LH, '/usr/libexec/nethserver/nic-info |');
    while(my $line = decode('UTF-8', <LH>)) {
	chomp $line;
	my %H = ();
	@H{@fields} = split(/,/, $line);
	push @records, [
            $H{'name'},
            {
                'type' => 'ethernet',
                'role' => '',
                'bootproto' => 'none',
                fetch_ifcfg_props($H{'name'})
            }
        ];

        # Find the first interface with cable-connected:
        if( ! defined $cableid && $H{'link'}) {
            $cableid = $#records;
        }
    }
    close(LH);

    # No cable connected? Fallback to first interface:
    if( ! defined $cableid) {
        $cableid = 0;
    }

    if( @records && ! grep { ($_->[1]->{'role'} || '') eq 'green' } @records ) {
        warn("[WARNING] green role not found. Using default IP configuration on $records[$cableid]->[0].\n");
        $records[$cableid]->[1]->{'ipaddr'} = '192.168.1.1';
        $records[$cableid]->[1]->{'netmask'} = '255.255.255.0';
        $records[$cableid]->[1]->{'gateway'} = '';
        $records[$cableid]->[1]->{'role'} = 'green';
    }

    foreach (@records) {
        $idb->new_record(@{$_});
    }
}

sub fetch_ifcfg_props
{
    my $ifname = shift;
    my %props = ();

    # Note: command returns empty output if interface is DOWN:
    open(ADDR, '-|', "ip -o -4 address show dev $ifname");
    while(<ADDR>) {
        chomp;
        my($id, $dev, $family, $cidr, $rest) = split(/\s+/, $_, 5);

        my($addr, $bitmask) = split(m|/|, $cidr, 2);

        if($addr) {
            $props{'ipaddr'} = $addr;
            $props{'netmask'} = Net::IPv4Addr::ipv4_cidr2msk($bitmask);
            last;
        }
    }
    close(ADDR);

    open(ROUTE, '-|', 'ip -o route | grep ^default');
    while(<ROUTE>) {
        chomp;
        my($p1, $via, $gateway, $p2, $dev) = split(/\s+/, $_);

        if($dev eq $ifname) {
            $props{'gateway'} = $gateway;
        }
    }
    close(ROUTE);

    if($props{'ipaddr'} && $props{'netmask'}) {
        $props{'role'} = 'green';
    }

    return %props;
}

sub fetch_dns
{
    my @dns = ();

    # Read DNS configuration
    open RESOLV, '/etc/resolv.conf';
    while (<RESOLV>) {
        chomp;
        if ( $_ =~ /^nameserver/ ) {
            my ($i, $j) = split(/ /);
            push(@dns,$j);
        }
    }
    close RESOLV;
    return @dns;
}

my $dns=join(',', fetch_dns());
if($dns) {
    $cdb->set_prop('dns', 'NameServers', $dns);
}

# Read timezone configuration
my $timezone = `timedatectl status | sed -n -r '/^ *Time zone: / { s/^ *Time zone: ([^ ]+).*\$/\\1/; p }'`;
chomp($timezone);
$cdb->set_value('TimeZone', $timezone);

# Read hostname
my($system_name, $domain_name) = split(m/\./, (`hostnamectl --static` || `hostnamectl --transient` || `/bin/hostname`), 2);

chomp($domain_name);

$cdb->set_value('SystemName', $system_name);
$cdb->set_value('DomainName', $domain_name);

# Grab all ethernet interfaces
initialize_networks_db();

