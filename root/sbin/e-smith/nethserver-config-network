#!/usr/bin/perl -w
#
# Copyright (C) 2014 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see .
#
use esmith::NetworksDB;
use JSON;
use Encode qw(encode decode);
use esmith::event;
use strict;

my $ndb = esmith::NetworksDB->open();

my $updateonly = 0;
if ( defined($ARGV[0]) && $ARGV[0] eq '--update-db-only' ) {
    $updateonly = 1;
}

update_network_db();
if ($updateonly) {
    exit(0);
}

my @lost_interfaces = read_lost_interfaces();

# the role here is a string prefix because in logical interfaces it is
# "recursively inherited":
my @lost_greens = grep { $_->{'role'} =~ m/^green/  } @lost_interfaces;
if ( ! @lost_greens) {
    exit 0; # nothing to do
}

my @free_interfaces = read_free_interfaces();

if (scalar(@free_interfaces) == 1) {
    
    my $free = shift @free_interfaces;
    my $green = shift @lost_greens;
   
    if ($green->{'name'} ne $free->{'name'}) {
         $ndb->set_prop($free->{'name'}, 'role', 'green');
         my $new = $ndb->get($free->{'name'});
         my $old = $ndb->get($green->{'name'});
         $new->merge_props($old->props);
         if($old) {
	     $old->delete();
         }
    }
    
} elsif(scalar(@free_interfaces) > 1) {
    #
    # More than 1 new interface found:
    # create an emergency bridge
    #
    my $br_name = 'brdef';
    my %br = (
        'type' => 'bridge',
        'bootproto' => 'none',
        'device' => $br_name,
        'onboot' => 'yes',
        'gateway' => '',
        'role' => 'green'
    );
    my $k = '';
    foreach my $green (@lost_greens) {
        $br{'ipaddr'.$k} = $green->{'ipaddr'};
        $br{'netmask'.$k} = $green->{'netmask'};
        if ($br{'gateway'} eq '') {
            $br{'gateway'} = $green->{'gateway'};
        }
        $ndb->set_prop($green->{'name'},'role','');
        my $old_green = $ndb->get($green->{'name'});
        $old_green->delete();
        if($green->{'role'} =~ /^[a-z]+\((br.)\)/) {
            my $oldbr = $ndb->get($1);
            if (defined($oldbr)) {
                $oldbr->delete();
            }
        }
        $k++;
    }
    my $br_record = $ndb->get($br_name) || undef;
    if (defined $br_record) {
        $br_record->merge_props(%br);
    } else {
        $ndb->new_record($br_name,\%br);
    }
    my %eth = (
        'role' => 'bridged',
        'bridge' => $br_name
    );
    foreach (@free_interfaces) {
        my $r = $ndb->get($_->{'name'}) || undef;
        if (defined $r) {
            $r->merge_props(%eth);
        } else {
            $ndb->new_record($_->{'name'}, \%eth);
        }
    }

} else {

    # nothing to do
    exit 0;
}

$ndb->close();

#
# Apply configuration
#
print "\nReconfiguring network...\n";
exit 1 if(event_signal('interface-update') == 0);
exit 0;

# -------------------------------------------------------------------
# Functions
# -------------------------------------------------------------------

#
# Search for interfaces not registered inside the networks db
#
sub update_network_db
{
    my @fields = qw(name type model driver speed link);
    my @free = ();
    open(LH, '/usr/libexec/nethserver/nic-info -n|');
    while(my $line = decode('UTF-8', <LH>)) {
        chomp $line;
        my %H = ();
        @H{@fields} = split(/,/, $line);
        my $rec = $ndb->get($H{'name'});

        if (!defined $rec) {
            $ndb->new_record($H{'name'}, {'type' => 'ethernet', 'role' => ''});
        }
   }
}

#
# Lost interfaces are present in Networks DB and have a role or are
# parts of logical interfaces, but their MAC address does not match
# with present interfaces.
#
sub read_lost_interfaces
{
    local $/;
    open(LH, '/usr/libexec/nethserver/eth-unmapped |');
    my $data = decode('UTF-8', <LH>);
    close(LH);
    return @{JSON::decode_json($data)};
}


#
# An interface is considered "free" when it is not in DB or it has not
# a role assigned.
#
sub read_free_interfaces
{
    my @fields = qw(name type model driver speed link);
    my @free = ();
    open(LH, '/usr/libexec/nethserver/nic-info -n|');
    while(my $line = decode('UTF-8', <LH>)) {
	chomp $line;
	my %H = ();
	@H{@fields} = split(/,/, $line);
	my $rec = $ndb->get($H{'name'});

	# NIC is in networks DB and has a role:
	# consider it "configured" and skip it:
	if(defined $rec  && $rec->prop('role'))  {
	    next;
	}

	# in any other case, consider the interface "free":
	push @free, \%H;
    }
    close(LH);
    return @free;
}



